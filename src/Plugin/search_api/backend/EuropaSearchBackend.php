<?php

declare(strict_types = 1);

namespace Drupal\oe_search\Plugin\search_api\backend;

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\PluginFormInterface;
use Drupal\Core\StringTranslation\StringTranslationTrait;
use Drupal\search_api\Backend\BackendPluginBase;
use Drupal\search_api\IndexInterface;
use Drupal\search_api\Query\QueryInterface;
use OpenEuropa\EuropaSearchClient\Model\Document;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * European Commission Europa Search backend for search_api.
 *
 * @SearchApiBackend(
 *   id = "oe_search",
 *   label = @Translation("EC Europa Search"),
 *   description = @Translation("Index items using EC Europa Search backend.")
 * )
 */
class EuropaSearchBackend extends BackendPluginBase implements PluginFormInterface {

  use StringTranslationTrait;

  /**
   * The config factory.
   *
   * @var \Drupal\Core\Config\ConfigFactoryInterface
   */
  protected $config;

  /**
   * The UserPlaces Helper custom module.
   *
   * @var \Drupal\oe_search\EuropaSearchService
   */
  protected $client;

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    $instance = parent::create($container, $configuration, $plugin_id, $plugin_definition);
    $instance->client = $container->get('oe_search.es_service');
    $instance->config = $container->get('config.factory')->getEditable('oe_search.server');
    return $instance;
  }

  /**
   * {@inheritDoc}
   */
  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {

    $form['api_key'] = [
      '#type' => 'textfield',
      '#title' => $this->t('API key'),
      '#description' => $this->t('The api key is a unique key generated by the search team. It ties your application to a specific behaviour (allowed field names, security details, display templates, field translations, etc).'),
      '#required' => TRUE,
      '#default_value' => $this->config->get('api_key'),
    ];

    $form['database'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Database'),
      '#description' => $this->t('The database element correspond to a dataSource that contains the documents.'),
      '#required' => TRUE,
      '#default_value' => $this->config->get('database'),
    ];

    $form['ingestion_api_endpoint'] = [
      '#type' => 'url',
      '#title' => $this->t('Ingestion API endpoint'),
      '#description' => $this->t('The URL of the endpoint where the Ingestion API is available.'),
      '#required' => TRUE,
      '#default_value' => $this->config->get('ingestion_api_endpoint'),
    ];

    $form['search_api_endpoint'] = [
      '#type' => 'url',
      '#title' => $this->t('Search API endpoint'),
      '#description' => $this->t('The URL of the endpoint where the Search API is available.'),
      '#required' => TRUE,
      '#default_value' => $this->config->get('search_api_endpoint'),
    ];

    return $form;
  }

  /**
   * Form submission handler.
   */
  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    $this->config
      ->set('api_key', $form_state->getValue('api_key'))
      ->set('database', $form_state->getValue('database'))
      ->set('ingestion_api_endpoint', $form_state->getValue('ingestion_api_endpoint'))
      ->set('search_api_endpoint', $form_state->getValue('search_api_endpoint'))
      ->save();
  }

  /**
   * {@inheritDoc}
   */
  public function indexItems(IndexInterface $index, array $items) {
    $api = $this->client->ingestionApi();

    // @todo Support multiple indexes by generating a reference id that takes
    //   into account index id and item id. Store the item id as separate
    //   field.
    $indexed = [];
    /** @var \Drupal\search_api\Item\ItemInterface[] $items */
    foreach ($items as $id => $item) {
      try {
        $ingestion = $api->ingestText([
          'uri' => $item->getOriginalObject()->getValue()->toUrl()->setAbsolute()->toString(),
          'text' => $item->getOriginalObject()->getValue()->label(),
          'reference' => $id,
        ]);
        $indexed[] = $ingestion->getReference();
      }
      catch (\Exception $e) {
        $this->getLogger()->warning($e->getMessage());
      }
    }

    return $indexed;
  }

  /**
   * {@inheritDoc}
   */
  public function deleteItems(IndexInterface $index, array $item_ids) {
    $api = $this->client->ingestionApi();

    foreach ($item_ids as $item_id) {
      try {
        $api->deleteDocument($item_id);
      }
      catch (\Exception $e) {
        $this->getLogger()->warning($e->getMessage());
      }
    }
  }

  /**
   * {@inheritDoc}
   */
  public function deleteAllIndexItems(IndexInterface $index, $datasource_id = NULL) {
    // There is no method to bulk delete items in the Europa Search API.
    // Fetch all the documents available and then delete them one by one.
    $results = $this->client->searchApi();

    $item_ids = array_map(function (Document $document) {
      return $document->getReference();
    }, $results);

    // @todo Handle datasource.
    $this->deleteItems($index, $item_ids);
  }

  /**
   * {@inheritDoc}
   */
  public function search(QueryInterface $query) {
    // @todo Make sure the search is run using the proper index.
    $results = $this->client->searchApi();

    $result_set = $query->getResults();
    $result_set->setResultCount($results);

    foreach ($results as $document) {
      $result_item = $this->fieldsHelper->createItem($query->getIndex(), $document->getReference());
      $result_set->addResultItem($result_item);
    }

    \Drupal::messenger()->addWarning($this->t('Search is not fully supported yet in %backend backends.', [
      '%backend' => $this->label(),
    ]));
  }

  /**
   * Form validation handler.
   *
   * @param array $form
   *   An associative array containing the structure of the plugin form as built
   *   by static::buildConfigurationForm().
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form. Calling code should pass on a subform
   *   state created through
   *   \Drupal\Core\Form\SubformState::createForSubform().
   */
  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
    // @todo Implement validateConfigurationForm() method.
  }

}
